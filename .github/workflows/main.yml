name: 'Publish packages'

on:
  workflow_dispatch:
    inputs:
      deploy-sdk:
        type: boolean
        description: Deploy components of the SDK (Compiler, Toolset, Sdk, ProjectTemplates)
      deploy-langserver:
        type: boolean
        description: Deploy the language server (Compiler, LanguageServer)
      deploy-vscext:
        type: boolean
        description: Deploy the VS Code extension
      version:
        type: string
        description: The version number to deploy with
        required: true
      prerelease:
        type: boolean
        description: The deployed version is pre-release

env:
  CONFIGURATION: 'Release'  # The configuration to use
  VERSION: ${{ github.event.inputs.version }}
  PRERELEASE: ${{ github.event.inputs.prerelease }}

jobs:
  deploy:
    runs-on: windows-latest
    steps:
      # Set up environment
    - name: Clone the repo
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js environment
      uses: actions/setup-node@v3.5.1
      with:
        node-version: 18

    - name: Install VSCE
      run: npm install -g @vscode/vsce

      # Build and packaging
    - name: Recurse into src
      run: cd src

    - name: Package .NET portion
      run: |
        $sdkProjects = "Compiler", "Compiler.Toolset", "Sdk", "ProjectTemplates"
        $langserverProjects = "Compiler", "LanguageServer"
        $projects = @()

        if ($${{ github.event.inputs.deploy-sdk }}) { $projects += $sdkProjects; }
        if ($${{ github.event.inputs.deploy-langserver }}) { $projects += $langserverProjects; }

        $version = "${{ env.VERSION }}"
        if ($${{ env.PRERELEASE }}) { $version += "-pre"; }

        foreach ($project in $projects)
        {
          $project = "Draco.$project"
          [Console]::WriteLine("dotnet package $project with version $version")
        }

    - name: Package VS Code extension
      run: |
        if ($${{ github.event.inputs.deploy-vscext }})
        {
          [Console]::WriteLine("npm version $${ env.VERSION }")
          if ($${{ env.PRERELEASE }}) { [Console]::WriteLine("npm prerelease") }
          [Console]::WriteLine("vsce package")
        }
